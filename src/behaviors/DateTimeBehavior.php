<?php

namespace JCIT\behaviors;

use Carbon\Carbon;
use yii\base\Behavior;
use yii\base\InvalidArgumentException;
use yii\base\UnknownPropertyException;

/**
 * Class DateTimeBehavior
 * @package JCIT\behaviors
 */
class DateTimeBehavior extends Behavior
{
    const TYPE_DATE = 'date';
    const TYPE_DATETIME = 'datetime';
    const TYPE_TIME = 'time';

    /**
     * Suffix to recognize when to get or set an object
     *
     * @var string
     */
    public $attributeSuffix = 'Object';

    /**
     * Map of attributes to type
     *
     * @var string[]
     */
    public $attributes = [];

    /**
     * Timezone the raw attributes are stored in
     *
     * @var string
     */
    public $attributeTimezone = 'UTC';

    /**
     * Formats of how to (de)serialize the property
     *
     * @var array
     */
    public $typeFormats = [
        self::TYPE_DATETIME => 'Y-m-d H:i:s',
        self::TYPE_DATE => 'Y-m-d',
        self::TYPE_TIME => 'H:i:s',
    ];

    /**
     * @param string $name
     * @return mixed
     * @throws \yii\base\UnknownPropertyException
     */
    public function __get($name)
    {
        if (($realName = $this->isBehaviorAttribute($name)) !== false) {
            $type = $this->attributes[$name];
            switch ($type) {
                case self::TYPE_DATETIME:
                    $timezone = (new Carbon())->timezone;
                    $result = Carbon::createFromFormat($this->typeFormats[$type], parent::__get($realName), new \DateTimeZone($this->attributeTimezone));
                    $result->setTimezone($timezone);
                case self::TYPE_DATE:
                case self::TYPE_TIME:
                    $result = Carbon::createFromFormat($this->typeFormats[$type], parent::__get($realName));
                    break;
                default:
                    throw new UnknownPropertyException('Unknown type');
            }

            return $result;
        }

        return parent::__get($name);
    }

    /**
     * @param string $name
     * @param mixed $value
     * @throws \yii\base\UnknownPropertyException
     */
    public function __set($name, $value)
    {
        if (($realName = $this->isBehaviorAttribute($name)) !== false) {
            if (!$value instanceof Carbon) {
                throw new InvalidArgumentException('Can only set objects instance of ' . Carbon::class);
            }
            $clonedValue = $value->clone();

            $type = $this->attributes[$name];
            switch ($type) {
                case self::TYPE_DATETIME:
                    $clonedValue->setTimezone($this->attributeTimezone);
                case self::TYPE_DATE:
                case self::TYPE_TIME:
                    $name = $realName;
                    $value = $clonedValue->format($this->typeFormats[$type]);
                default:
                    throw new UnknownPropertyException('Unknown type');
            }
        }

        parent::__set($name, $value); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $name
     * @param bool $checkVars
     * @return bool
     */
    public function canGetProperty($name, $checkVars = true)
    {
        return $this->isBehaviorAttribute($name)
            || parent::canGetProperty($name, $checkVars);
    }

    /**
     * @param string $name
     * @param bool $checkVars
     * @return bool
     */
    public function canSetProperty($name, $checkVars = true)
    {
        return $this->isBehaviorAttribute($name)
            || parent::canSetProperty($name, $checkVars);
    }

    /**
     * TODO By default, if the owner is instance of ActiveRecord, find attributes of type timestamp, datetime, date and time
     */
    public function init()
    {
        parent::init();
    }

    /**
     * @param $name
     * @return bool|string
     */
    protected function isBehaviorProperty($name)
    {
        $realName = $this->realName($name);
        return
            $realName . $this->attributeSuffix === $name && isset($this->attributes[$realName])
            ? $realName
            : false;
    }

    /**
     * @param string $name
     * @return string
     */
    protected function realName(string $name): string
    {
        if (strpos($name, $this->attributeSuffix) !== false) {
            return substr($name, -(strlen($this->attributeSuffix)));
        }
        return $name;
    }
}